{"version":3,"sources":["..\\src\\constants.js","..\\src\\utils.js","..\\src\\Queue.js","..\\src\\Sort.js","..\\src\\index.js"],"names":["MAX_ELEMENTS","MAX_VALUE","MIN_VALUE","SORT_SPEED","getValue","value","element","trim","isNaN","alert","addEvent","event","listener","addEventListener","attachEvent","createRandomNumbers","arr","num","i","amount","parseInt","Math","random","push","renderColumns","columnsArea","innerHTML","map","item","index","join","renderSwap","arrElements","index1","index2","temp","ele1","children","ele2","title","height","offsetHeight","style","className","renderAnimation","options","params","queue","arrAnimation","resetColor","disableBtns","setArrCurrent","promise","Promise","resolve","reject","timer","setTimeout","performAnimation","length","shift","then","getQueue","disableAllBtn","len","arrBtns","flag","disabled","resetAllColor","Array","prototype","forEach","call","columns","Queue","dataStore","splice","a","b","JSON","parse","stringify","Sort","arrAnimations","j","swap","min","key","partition","left","right","heapSize","floor","maxHeapify","x","l","r","largest","document","querySelector","inputArea","btnsArea","querySelectorAll","arrCurrent","strategy","randomNumbers","setQueue","isFull","enqueue","isEmpty","dequeue","type","sort","getElements","getAnimations","init","target","id","refresh"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,sCAAe,EAArB,EAAwB;AACxB,IAAMC,gCAAY,GAAlB,EAAsB;AACtB,IAAMC,gCAAY,EAAlB,EAAqB;AACrB,IAAMC,kCAAa,GAAnB,EAAuB;;;;;;;;;ACH9B;;AAEO,IAAMC,8BAAW,SAAXA,QAAW,UAAW;AAC/B,QAAMC,QAAQC,QAAQD,KAAR,CAAcE,IAAd,EAAd;;AAEA,QAAIF,UAAU,EAAV,IAAgB,CAACG,MAAMH,KAAN,CAArB,EAAmC;AAC/B,YAAIA,gCAAqBA,4BAAzB,EAA4C;AACxC,mBAAOA,KAAP;AACH,SAFD,MAEO;AACHI,kBAAM,cAAN;AACH;AACJ,KAND,MAMO;AACHA,cAAM,uBAAN;AACH;AACJ,CAZM;;AAeA,IAAMC,8BAAW,SAAXA,QAAW,CAACJ,OAAD,EAAUK,KAAV,EAAiBC,QAAjB,EAA8B;AAClD,QAAIN,QAAQO,gBAAZ,EAA8B;AAC1BP,gBAAQO,gBAAR,CAAyBF,KAAzB,EAAgCC,QAAhC,EAA0C,KAA1C;AACH,KAFD,MAEO,IAAIN,QAAQQ,WAAZ,EAAyB;AAC5BR,gBAAQQ,WAAR,CAAoB,OAAOH,KAA3B,EAAkCC,QAAlC;AACH,KAFM,MAEA;AACHN,gBAAQ,OAAOK,KAAf,IAAwBC,QAAxB;AACH;AACJ,CARM;;AAUA,IAAMG,oDAAsB,SAAtBA,mBAAsB,SAAU;AACzC,QAAIC,MAAM,EAAV;AACA,QAAIC,MAAM,IAAV;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,MAApB,EAA4BD,GAA5B,EAAiC;AAC7BD,cAAMG,SAASC,KAAKC,MAAL,MAAiB,2CAAjB,CAAT,wBAAN;AACAN,YAAIO,IAAJ,CAASN,GAAT;AACH;AACD,WAAOD,GAAP;AACH,CARM;;AAUA,IAAMQ,wCAAgB,SAAhBA,aAAgB,CAACC,WAAD,EAAcT,GAAd,EAAsB;AAC/CS,gBAAYC,SAAZ,GAAwBV,IAAIW,GAAJ,CAAQ,UAACC,IAAD,EAAOC,KAAP;AAAA,qCAAqCA,KAArC,iBAAsDD,IAAtD,uCAA4FA,OAAO,CAAnG;AAAA,KAAR,EAA2HE,IAA3H,CAAgI,EAAhI,CAAxB;AACH,CAFM;;AAKA,IAAMC,kCAAa,SAAbA,UAAa,CAACN,WAAD,EAAcO,WAAd,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA8C;AACpE,QAAIC,OAAO,EAAX;AACA,QAAMC,OAAOX,YAAYY,QAAZ,CAAqBJ,MAArB,CAAb;AACA,QAAMK,OAAOb,YAAYY,QAAZ,CAAqBH,MAArB,CAAb;AACAC,SAAKI,KAAL,GAAaH,KAAKG,KAAlB;AACAJ,SAAKK,MAAL,GAAcJ,KAAKK,YAAnB;AACAN,SAAKI,KAAL,GAAaH,KAAKG,KAAlB;AACAJ,SAAKK,MAAL,GAAcJ,KAAKK,YAAnB;;AAEA;AACAL,SAAKG,KAAL,GAAaD,KAAKC,KAAlB;AACAD,SAAKC,KAAL,GAAaJ,KAAKI,KAAlB;;AAEA;AACAH,SAAKM,KAAL,CAAWF,MAAX,GAAoBF,KAAKG,YAAL,GAAoB,IAAxC;AACAH,SAAKI,KAAL,CAAWF,MAAX,GAAoBL,KAAKK,MAAL,GAAc,IAAlC;;AAEA;AACAJ,SAAKO,SAAL,GAAiB,QAAjB;AACAL,SAAKK,SAAL,GAAiB,QAAjB;AACH,CApBM;;AAsBP;;;;;;;;;;;AAWO,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AACxC,QAAIC,SAAS,IAAb;AADwC,QAGpCC,KAHoC,GAWpCF,OAXoC,CAGpCE,KAHoC;AAAA,QAIpCtB,WAJoC,GAWpCoB,OAXoC,CAIpCpB,WAJoC;AAAA,QAKpCO,WALoC,GAWpCa,OAXoC,CAKpCb,WALoC;AAAA,QAMpCgB,YANoC,GAWpCH,OAXoC,CAMpCG,YANoC;AAAA,QAOpCjB,UAPoC,GAWpCc,OAXoC,CAOpCd,UAPoC;AAAA,QAQpCkB,UARoC,GAWpCJ,OAXoC,CAQpCI,UARoC;AAAA,QASpCC,WAToC,GAWpCL,OAXoC,CASpCK,WAToC;AAAA,QAUpCC,aAVoC,GAWpCN,OAXoC,CAUpCM,aAVoC;;;AAaxC,QAAMC,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7C,YAAIC,QAAQC,WAAW,SAASC,gBAAT,GAA4B;AAC/C,gBAAIV,aAAaW,MAAjB,EAAyB;AACrBV;AACAH,yBAASE,aAAaY,KAAb,EAAT;AACAV,8BAAc,IAAd;AACAnB,2BAAWN,WAAX,EAAwBO,WAAxB,EAAqCc,OAAO,CAAP,CAArC,EAAgDA,OAAO,CAAP,CAAhD;AACAU,wBAAQC,WAAWC,gBAAX,wBAAR;AACH,aAND,MAMO;AACHT;AACAC,8BAAc,KAAd;AACAI;AACH;AACJ,SAZW,wBAAZ;AAaH,KAde,CAAhB;AAeAF,YAAQS,IAAR,CAAa,YAAM;AACfV,sBAAcJ,MAAMe,QAAN,EAAd;AACH,KAFD;AAKH,CAjCM;;AAoCA,IAAMC,wCAAgB,SAAhBA,aAAgB,UAAW;AACpC,QAAMC,MAAMC,QAAQN,MAApB;AACA,WAAO,UAAUO,IAAV,EAAgB;AACnB,aAAK,IAAIhD,IAAI,CAAb,EAAgBA,IAAI8C,GAApB,EAAyB9C,GAAzB,EAA8B;AAC1B+C,oBAAQ/C,CAAR,EAAWiD,QAAX,GAAsBD,IAAtB;AACH;AACJ,KAJD;AAKH,CAPM;;AASA,IAAME,wCAAgB,SAAhBA,aAAgB,UAAW;AACpCC,UAAMC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BC,OAA7B,EAAsC,UAAUnE,OAAV,EAAmB;AACrDA,gBAAQqC,SAAR,GAAoB,QAApB;AACH,KAFD;AAGH,CAJM;;;;;;;;;;ACxHP;;;;IAEM+B;AACF,qBAAc;AAAA;;AACV,aAAKC,SAAL,GAAiB,EAAjB;AACH;;;;gCAEOrE,SAAS;AACb,iBAAKqE,SAAL,CAAepD,IAAf,CAAoBjB,OAApB;AACH;;;kCAES;AACN,mBAAO,KAAKqE,SAAL,CAAef,KAAf,EAAP;AACH;;;gCAEM/B,OAAO;AACV,iBAAK8C,SAAL,CAAeC,MAAf,CAAsB/C,KAAtB,EAA6B,CAA7B;AACH;;;6BAEIgD,GAAGC,GAAG;AACP,gBAAIH,YAAY,KAAKA,SAArB;AACA,gBAAMxC,OAAOwC,UAAUE,CAAV,CAAb;AACAF,sBAAUE,CAAV,IAAeF,UAAUG,CAAV,CAAf;AACAH,sBAAUG,CAAV,IAAe3C,IAAf;AACH;;;mCAEU;AACP,mBAAO,KAAKwC,SAAZ;AACH;;;iCAEQ3D,KAAK;AACV,iBAAK2D,SAAL,GAAiBI,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAejE,GAAf,CAAX,CAAjB;AACH;;;kCAES;AACN,mBAAO,KAAK2D,SAAL,CAAehB,MAAf,KAA0B,CAA1B,GAA8B,IAA9B,GAAqC,KAA5C;AACH;;;iCAEQ;AACL,mBAAO,KAAKgB,SAAL,CAAehB,MAAf,yBAAuC,IAAvC,GAA8C,KAArD;AACH;;;;;;kBAGUe;;;;;;;;;;;;IC3CTQ;AACF,kBAAYlD,WAAZ,EAAyBmD,aAAzB,EAAwC;AAAA;;AACpC,aAAKnD,WAAL,GAAmB+C,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAejD,WAAf,CAAX,CAAnB;AACA,aAAKmD,aAAL,GAAqBJ,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeE,aAAf,CAAX,CAArB;AACH;;;;qCAEY;AACT,gBAAInD,cAAc,KAAKA,WAAvB;AACA,gBAAImD,gBAAgB,KAAKA,aAAzB;;AAEA,gBAAMnB,MAAMhC,YAAY2B,MAAxB;AACA,iBAAK,IAAIzC,IAAI,CAAb,EAAgBA,IAAI8C,GAApB,EAAyB9C,GAAzB,EAA8B;AAC1B,qBAAK,IAAIkE,IAAI,CAAb,EAAgBA,IAAIpB,MAAM9C,CAAN,GAAU,CAA9B,EAAiCkE,GAAjC,EAAsC;AAClC,wBAAIpD,YAAYoD,CAAZ,IAAiBpD,YAAYoD,IAAI,CAAhB,CAArB,EAAyC;AACrC,6BAAKC,IAAL,CAAUD,CAAV,EAAaA,IAAI,CAAjB;AACA,6BAAKD,aAAL,CAAmB5D,IAAnB,CAAwB,CAAC6D,CAAD,EAAIA,IAAI,CAAR,CAAxB;AACH;AACJ;AACJ;AACJ;;;qCAEY;AACT,gBAAIpD,cAAc,KAAKA,WAAvB;AACA,gBAAImD,gBAAgB,KAAKA,aAAzB;;AAEA,gBAAMnB,MAAMhC,YAAY2B,MAAxB;AACA,iBAAK,IAAIzC,IAAI,CAAb,EAAgBA,IAAI8C,MAAM,CAA1B,EAA6B9C,GAA7B,EAAkC;AAC9B,oBAAIoE,MAAMpE,CAAV;AACA,qBAAK,IAAIkE,IAAIlE,IAAI,CAAjB,EAAoBkE,IAAIpB,GAAxB,EAA6BoB,GAA7B,EAAkC;AAC9B,wBAAIpD,YAAYoD,CAAZ,IAAiBpD,YAAYsD,GAAZ,CAArB,EAAuC;AACnCA,8BAAMF,CAAN;AACH;AACJ;AACD,qBAAKC,IAAL,CAAUnE,CAAV,EAAaoE,GAAb;AACA,qBAAKH,aAAL,CAAmB5D,IAAnB,CAAwB,CAACL,CAAD,EAAIoE,GAAJ,CAAxB;AACH;AACJ;;;qCAEY;AACT,gBAAItD,cAAc,KAAKA,WAAvB;AACA,gBAAImD,gBAAgB,KAAKA,aAAzB;;AAEA,gBAAMnB,MAAMhC,YAAY2B,MAAxB;AACA,iBAAK,IAAIzC,IAAI,CAAb,EAAgBA,IAAI8C,GAApB,EAAyB9C,GAAzB,EAA8B;AAC1B,oBAAMqE,MAAMvD,YAAYd,CAAZ,CAAZ;AACA,oBAAIkE,IAAIlE,IAAI,CAAZ;AACA,uBAAOkE,KAAK,CAAL,IAAUpD,YAAYoD,CAAZ,IAAiBG,GAAlC,EAAuC;AACnCvD,gCAAYoD,IAAI,CAAhB,IAAqBpD,YAAYoD,CAAZ,CAArB;AACA,yBAAKD,aAAL,CAAmB5D,IAAnB,CAAwB,CAAC6D,CAAD,EAAIA,IAAI,CAAR,CAAxB;AACAA;AACH;AACDpD,4BAAYoD,IAAI,CAAhB,IAAqBG,GAArB;AACH;AAEJ;;;oCAEW;AACR,gBAAIvD,cAAc,KAAKA,WAAvB;AACA,gBAAImD,gBAAgB,KAAKA,aAAzB;AACA,iBAAKK,SAAL,CAAexD,WAAf,EAA4B,CAA5B,EAA+BA,YAAY2B,MAAZ,GAAqB,CAApD;AAEH;;AAED;;;;;;;;;kCAMU3C,KAAKyE,MAAMC,OAAO;AACxB,gBAAMH,MAAMvE,IAAI0E,KAAJ,CAAZ;AACA,gBAAIxE,IAAIuE,OAAO,CAAf;AACA,iBAAK,IAAIL,IAAIK,IAAb,EAAmBL,IAAIM,KAAvB,EAA8BN,GAA9B,EAAmC;AAC/B,oBAAIpE,IAAIoE,CAAJ,IAASG,GAAb,EAAkB;AACd,yBAAKF,IAAL,CAAU,EAAEnE,CAAZ,EAAekE,CAAf;AACA,yBAAKD,aAAL,CAAmB5D,IAAnB,CAAwB,CAACL,CAAD,EAAIkE,CAAJ,CAAxB;AACH;AACJ;AACD,iBAAKC,IAAL,CAAU,EAAEnE,CAAZ,EAAewE,KAAf;AACA,iBAAKP,aAAL,CAAmB5D,IAAnB,CAAwB,CAACL,CAAD,EAAIwE,KAAJ,CAAxB;AACA,gBAAID,OAAOvE,IAAI,CAAf,EAAkB;AACd,qBAAKsE,SAAL,CAAexE,GAAf,EAAoByE,IAApB,EAA0BvE,IAAI,CAA9B;AACH;AACD,gBAAIwE,QAAQxE,IAAI,CAAhB,EAAmB;AACf,qBAAKsE,SAAL,CAAexE,GAAf,EAAoBE,IAAI,CAAxB,EAA2BwE,KAA3B;AACH;AACJ;;AAED;;;;;;;;mCAKW;AACP,gBAAIC,WAAW,KAAK3D,WAAL,CAAiB2B,MAAhC;AACA;AACA,iBAAK,IAAIzC,IAAIG,KAAKuE,KAAL,CAAWD,WAAW,CAAtB,IAA2B,CAAxC,EAA2CzE,KAAK,CAAhD,EAAmDA,GAAnD,EAAwD;AACpD,qBAAK2E,UAAL,CAAgB,KAAK7D,WAArB,EAAkCd,CAAlC,EAAqCyE,QAArC;AACH;;AAED;AACA,iBAAK,IAAIP,IAAIO,WAAW,CAAxB,EAA2BP,KAAK,CAAhC,EAAmCA,GAAnC,EAAwC;AACpC,qBAAKC,IAAL,CAAU,CAAV,EAAaD,CAAb;AACA,qBAAKD,aAAL,CAAmB5D,IAAnB,CAAwB,CAAC,CAAD,EAAI6D,CAAJ,CAAxB;AACA,qBAAKS,UAAL,CAAgB,KAAK7D,WAArB,EAAkC,CAAlC,EAAqC,EAAE2D,QAAvC;AACH;AAEJ;;;mCAEU3E,KAAK8E,GAAG9B,KAAK;AACpB,gBAAM+B,IAAI,IAAID,CAAJ,GAAQ,CAAlB;AACA,gBAAME,IAAI,IAAIF,CAAJ,GAAQ,CAAlB;AACA,gBAAIG,UAAUH,CAAd;AACA,gBAAIC,IAAI/B,GAAJ,IAAWhD,IAAI+E,CAAJ,IAAS/E,IAAIiF,OAAJ,CAAxB,EAAsC;AAClCA,0BAAUF,CAAV;AACH;AACD,gBAAIC,IAAIhC,GAAJ,IAAWhD,IAAIgF,CAAJ,IAAShF,IAAIiF,OAAJ,CAAxB,EAAsC;AAClCA,0BAAUD,CAAV;AACH;AACD,gBAAIC,YAAYH,CAAhB,EAAmB;AACf,qBAAKT,IAAL,CAAUS,CAAV,EAAaG,OAAb;AACA,qBAAKd,aAAL,CAAmB5D,IAAnB,CAAwB,CAACuE,CAAD,EAAIG,OAAJ,CAAxB;AACA,qBAAKJ,UAAL,CAAgB7E,GAAhB,EAAqBiF,OAArB,EAA8BjC,GAA9B;AACH;AACJ;;;6BAGI/B,QAAQC,QAAQ;AACjB,gBAAIC,OAAO,IAAX;AACA,gBAAIH,cAAc,KAAKA,WAAvB;AACAG,mBAAOH,YAAYC,MAAZ,CAAP;AACAD,wBAAYC,MAAZ,IAAsBD,YAAYE,MAAZ,CAAtB;AACAF,wBAAYE,MAAZ,IAAsBC,IAAtB;AACH;;;sCAEa;AACV,mBAAO,KAAKH,WAAZ;AACH;;;wCAEe;AACZ,mBAAO,KAAKmD,aAAZ;AACH;;;;;;kBAGUD;;;;AChJf;;;;AACA;;;;AACA;;;;AAWA,IAAMzD,cAAcyE,SAASC,aAAT,CAAuB,WAAvB,CAApB;AACA,IAAM1B,UAAUhD,YAAYY,QAA5B;AACA,IAAM+D,YAAYF,SAASC,aAAT,CAAuB,YAAvB,CAAlB;AACA,IAAME,WAAWH,SAASI,gBAAT,CAA0B,UAA1B,EAAsC,CAAtC,CAAjB;AACA,IAAMrC,UAAUoC,SAAShE,QAAzB;AACA,IAAIkE,aAAa,EAAjB;AACA,IAAIpB,gBAAgB,EAApB;;AAGA,IAAMqB,WAAW;AACb,cAAU,kBAAY;AAClB,YAAMC,gBAAgB,gCAAoB,EAApB,CAAtB;AACA1D,cAAM2D,QAAN,CAAeD,aAAf;AACAF,qBAAaxD,MAAMe,QAAN,EAAb;AACH,KALY;AAMb,eAAW,mBAAY;AACnB,YAAMzD,QAAQ,qBAAS+F,SAAT,CAAd;AACA,YAAI/F,SAAS,CAAC0C,MAAM4D,MAAN,EAAd,EAA8B;AAC1B5D,kBAAM6D,OAAN,CAAcvG,KAAd;AACAkG,yBAAaxD,MAAMe,QAAN,EAAb;AACAsC,sBAAU/F,KAAV,GAAkB,EAAlB;AACH;AACJ,KAbY;AAcb,eAAW,mBAAY;AACnB,YAAI,CAAC0C,MAAM8D,OAAN,EAAL,EAAsB;AAClBpG,kBAAMsC,MAAM+D,OAAN,EAAN;AACAP,yBAAaxD,MAAMe,QAAN,EAAb;AACH,SAHD,MAGO;AACHrD,kBAAM,oBAAN;AACH;AACJ,KArBY;AAsBb,YAAQ,cAAUsG,IAAV,EAAgB;AACpB,YAAI,CAAChE,MAAM8D,OAAN,EAAL,EAAsB;AAClB;AACA,gBAAMG,OAAO,mBAASjE,MAAMe,QAAN,EAAT,EAA2BqB,aAA3B,CAAb;AACA6B,iBAAKD,IAAL;AACAhE,kBAAM2D,QAAN,CAAeM,KAAKC,WAAL,EAAf;;AAEA;AACA,gBAAMpE,UAAU;AACZE,4BADY;AAEZtB,wCAFY;AAGZM,6CAHY;AAIZoB,4CAJY;AAKZnB,6BAAauE,UALD;AAMZvD,8BAAcgE,KAAKE,aAAL,EANF;AAOZhE,6BAAa,uBAAM;AAAE,2BAAO,0BAAce,OAAd,CAAP;AAA+B,iBAPxC;AAQZhB,4BAAY,sBAAM;AAAE,8CAAcwB,OAAd;AAAwB;AARhC,aAAhB;AAUA,wCAAgB5B,OAAhB;AACH,SAlBD,MAkBO;AACHpC,kBAAM,oBAAN;AACH;AACJ;;AAGL;;AA/CiB,CAAjB,CAiDA,SAAS0G,IAAT,GAAgB;AACZ,yBAASd,QAAT,EAAmB,OAAnB,EAA4B,UAAU1F,KAAV,EAAiB;AACzC,YAAIA,MAAMyG,MAAN,CAAazE,SAAb,KAA2B,MAA/B,EAAuC;AACnC6D,qBAAS7F,MAAMyG,MAAN,CAAazE,SAAtB,EAAiChC,MAAMyG,MAAN,CAAaC,EAA9C;AACAC;AACH,SAHD,MAGO,IAAI3G,MAAMyG,MAAN,CAAazE,SAAb,IAA0B6D,SAAS7F,MAAMyG,MAAN,CAAazE,SAAtB,CAA9B,EAAgE;AACnE6D,qBAAS7F,MAAMyG,MAAN,CAAazE,SAAtB;AACA2E;AACH;AACJ,KARD;AASH;;AAED,SAASA,OAAT,GAAmB;AACf,8BAAc7F,WAAd,EAA2B8E,UAA3B;AACH;;AAED,SAASpD,aAAT,CAAuBnC,GAAvB,EAA4B;AACxBuF,iBAAavF,GAAb;AACH;;AAED,IAAI+B,QAAQ,qBAAZ;AACAyD,SAAS,QAAT;AACAc;AACAH","file":"4d7ca65a23f0fa8bb3cca1cfec0c191d.map","sourcesContent":["export const MAX_ELEMENTS = 60 // 队列中能存储的最大元素个数\r\nexport const MAX_VALUE = 100 // 元素最大值\r\nexport const MIN_VALUE = 10 // 元素最小值\r\nexport const SORT_SPEED = 150 //排序速度","import { MAX_VALUE, MIN_VALUE, SORT_SPEED } from './constants'\r\n\r\nexport const getValue = element => {\r\n    const value = element.value.trim()\r\n\r\n    if (value !== '' && !isNaN(value)) {\r\n        if (value > MIN_VALUE && value < MAX_VALUE) {\r\n            return value\r\n        } else {\r\n            alert('out of range')\r\n        }\r\n    } else {\r\n        alert('please enter a number')\r\n    }\r\n}\r\n\r\n\r\nexport const addEvent = (element, event, listener) => {\r\n    if (element.addEventListener) {\r\n        element.addEventListener(event, listener, false)\r\n    } else if (element.attachEvent) {\r\n        element.attachEvent('on' + event, listener)\r\n    } else {\r\n        element['on' + event] = listener\r\n    }\r\n}\r\n\r\nexport const createRandomNumbers = amount => {\r\n    let arr = []\r\n    let num = null\r\n    for (let i = 0; i < amount; i++) {\r\n        num = parseInt(Math.random() * (MAX_VALUE - MIN_VALUE)) + MIN_VALUE\r\n        arr.push(num)\r\n    }\r\n    return arr\r\n}\r\n\r\nexport const renderColumns = (columnsArea, arr) => {\r\n    columnsArea.innerHTML = arr.map((item, index) => `<div data-index=\"${index}\" title=\"${item}\" class=\"normal\" style=\"height:${item * 2}px;\"></div>`).join('')\r\n}\r\n\r\n\r\nexport const renderSwap = (columnsArea, arrElements, index1, index2) => {\r\n    let temp = {}\r\n    const ele1 = columnsArea.children[index1]\r\n    const ele2 = columnsArea.children[index2]\r\n    temp.title = ele1.title\r\n    temp.height = ele1.offsetHeight\r\n    temp.title = ele1.title\r\n    temp.height = ele1.offsetHeight\r\n\r\n    // title\r\n    ele1.title = ele2.title\r\n    ele2.title = temp.title\r\n\r\n    // height\r\n    ele1.style.height = ele2.offsetHeight + 'px'\r\n    ele2.style.height = temp.height + 'px'\r\n\r\n    // color\r\n    ele1.className = 'active'\r\n    ele2.className = 'active'\r\n}\r\n\r\n/**\r\n * options:{\r\n *      columnsArea 渲染动画堆栈的容器\r\n *      arrElements 待排序数组\r\n *      arrAnimation 动画堆栈\r\n *      renderSwap 交换顺序动画\r\n *      resetColor 重置颜色函数\r\n *      disableBtns 控制按钮开关函数\r\n * }\r\n * columnsArea, arrElements, arrAnimation, renderSwap, resetColor\r\n */\r\nexport const renderAnimation = (options) => {\r\n    let params = null\r\n    let {\r\n        queue,\r\n        columnsArea,\r\n        arrElements,\r\n        arrAnimation,\r\n        renderSwap,\r\n        resetColor,\r\n        disableBtns,\r\n        setArrCurrent\r\n    } = options\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n        let timer = setTimeout(function performAnimation() {\r\n            if (arrAnimation.length) {\r\n                resetColor()\r\n                params = arrAnimation.shift()\r\n                disableBtns()(true)\r\n                renderSwap(columnsArea, arrElements, params[0], params[1])\r\n                timer = setTimeout(performAnimation, SORT_SPEED)\r\n            } else {\r\n                resetColor()\r\n                disableBtns()(false)\r\n                resolve()\r\n            }\r\n        }, SORT_SPEED)\r\n    })\r\n    promise.then(() => {\r\n        setArrCurrent(queue.getQueue())\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nexport const disableAllBtn = arrBtns => {\r\n    const len = arrBtns.length\r\n    return function (flag) {\r\n        for (let i = 0; i < len; i++) {\r\n            arrBtns[i].disabled = flag\r\n        }\r\n    }\r\n}\r\n\r\nexport const resetAllColor = columns => {\r\n    Array.prototype.forEach.call(columns, function (element) {\r\n        element.className = 'normal'\r\n    })\r\n}","import { MAX_ELEMENTS } from './utils'\r\n\r\nclass Queue {\r\n    constructor() {\r\n        this.dataStore = []\r\n    }\r\n\r\n    enqueue(element) {\r\n        this.dataStore.push(element)\r\n    }\r\n\r\n    dequeue() {\r\n        return this.dataStore.shift()\r\n    }\r\n\r\n    delete(index) {\r\n        this.dataStore.splice(index, 1)\r\n    }\r\n\r\n    swap(a, b) {\r\n        let dataStore = this.dataStore\r\n        const temp = dataStore[a]\r\n        dataStore[a] = dataStore[b]\r\n        dataStore[b] = temp\r\n    }\r\n\r\n    getQueue() {\r\n        return this.dataStore\r\n    }\r\n\r\n    setQueue(arr) {\r\n        this.dataStore = JSON.parse(JSON.stringify(arr))\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.dataStore.length === 0 ? true : false\r\n    }\r\n\r\n    isFull() {\r\n        return this.dataStore.length > MAX_ELEMENTS ? true : false\r\n    }\r\n}\r\n\r\nexport default Queue","class Sort {\r\n    constructor(arrElements, arrAnimations) {\r\n        this.arrElements = JSON.parse(JSON.stringify(arrElements))\r\n        this.arrAnimations = JSON.parse(JSON.stringify(arrAnimations))\r\n    }\r\n\r\n    bubbleSort() {\r\n        let arrElements = this.arrElements\r\n        let arrAnimations = this.arrAnimations\r\n\r\n        const len = arrElements.length\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (arrElements[j] > arrElements[j + 1]) {\r\n                    this.swap(j, j + 1)\r\n                    this.arrAnimations.push([j, j + 1])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    selectSort() {\r\n        let arrElements = this.arrElements\r\n        let arrAnimations = this.arrAnimations\r\n\r\n        const len = arrElements.length\r\n        for (let i = 0; i < len - 1; i++) {\r\n            let min = i\r\n            for (let j = i + 1; j < len; j++) {\r\n                if (arrElements[j] < arrElements[min]) {\r\n                    min = j\r\n                }\r\n            }\r\n            this.swap(i, min)\r\n            this.arrAnimations.push([i, min])\r\n        }\r\n    }\r\n\r\n    insertSort() {\r\n        let arrElements = this.arrElements\r\n        let arrAnimations = this.arrAnimations\r\n\r\n        const len = arrElements.length\r\n        for (let i = 1; i < len; i++) {\r\n            const key = arrElements[i]\r\n            let j = i - 1\r\n            while (j >= 0 && arrElements[j] > key) {\r\n                arrElements[j + 1] = arrElements[j]\r\n                this.arrAnimations.push([j, j + 1])\r\n                j--\r\n            }\r\n            arrElements[j + 1] = key\r\n        }\r\n\r\n    }\r\n\r\n    quickSort() {\r\n        let arrElements = this.arrElements\r\n        let arrAnimations = this.arrAnimations\r\n        this.partition(arrElements, 0, arrElements.length - 1)\r\n\r\n    }\r\n\r\n    /**\r\n     * 以key为基准 一般设数组最右元素\r\n     * 比key小的都放左边 比key大的都放右边\r\n     * 用i标记比key小的位置\r\n     * 循环完一次后将key与i+1位置交换 完成第一次分治\r\n     */\r\n    partition(arr, left, right) {\r\n        const key = arr[right]\r\n        let i = left - 1\r\n        for (let j = left; j < right; j++) {\r\n            if (arr[j] < key) {\r\n                this.swap(++i, j)\r\n                this.arrAnimations.push([i, j])\r\n            }\r\n        }\r\n        this.swap(++i, right)\r\n        this.arrAnimations.push([i, right])\r\n        if (left < i - 1) {\r\n            this.partition(arr, left, i - 1)\r\n        }\r\n        if (right > i + 1) {\r\n            this.partition(arr, i + 1, right)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * maxHeapify建立最大堆\r\n     * 最大堆建成后将堆堆顶和堆底交换\r\n     * 剩下的元素继续建立最大堆\r\n     */\r\n    heapSort() {\r\n        let heapSize = this.arrElements.length\r\n        // 建堆\r\n        for (let i = Math.floor(heapSize / 1) - 1; i >= 0; i--) {\r\n            this.maxHeapify(this.arrElements, i, heapSize)\r\n        }\r\n\r\n        //排序\r\n        for (var j = heapSize - 1; j >= 1; j--) {\r\n            this.swap(0, j)\r\n            this.arrAnimations.push([0, j])\r\n            this.maxHeapify(this.arrElements, 0, --heapSize)\r\n        }\r\n\r\n    }\r\n\r\n    maxHeapify(arr, x, len) {\r\n        const l = 2 * x + 1\r\n        const r = 2 * x + 2\r\n        let largest = x\r\n        if (l < len && arr[l] > arr[largest]) {\r\n            largest = l\r\n        }\r\n        if (r < len && arr[r] > arr[largest]) {\r\n            largest = r\r\n        }\r\n        if (largest !== x) {\r\n            this.swap(x, largest)\r\n            this.arrAnimations.push([x, largest])\r\n            this.maxHeapify(arr, largest, len)\r\n        }\r\n    }\r\n\r\n\r\n    swap(index1, index2) {\r\n        let temp = null\r\n        let arrElements = this.arrElements\r\n        temp = arrElements[index1]\r\n        arrElements[index1] = arrElements[index2]\r\n        arrElements[index2] = temp\r\n    }\r\n\r\n    getElements() {\r\n        return this.arrElements\r\n    }\r\n\r\n    getAnimations() {\r\n        return this.arrAnimations\r\n    }\r\n}\r\n\r\nexport default Sort","import Queue from './Queue'\r\nimport Sort from './Sort'\r\nimport {\r\n    renderColumns,\r\n    createRandomNumbers,\r\n    getValue,\r\n    addEvent,\r\n    renderSwap,\r\n    renderAnimation,\r\n    resetAllColor,\r\n    disableAllBtn\r\n} from './utils'\r\n\r\nconst columnsArea = document.querySelector('#num-area')\r\nconst columns = columnsArea.children\r\nconst inputArea = document.querySelector('.num-input')\r\nconst btnsArea = document.querySelectorAll('.control')[0]\r\nconst arrBtns = btnsArea.children\r\nlet arrCurrent = []\r\nlet arrAnimations = []\r\n\r\n\r\nconst strategy = {\r\n    'random': function () {\r\n        const randomNumbers = createRandomNumbers(20)\r\n        queue.setQueue(randomNumbers)\r\n        arrCurrent = queue.getQueue()\r\n    },\r\n    'rightIn': function () {\r\n        const value = getValue(inputArea)\r\n        if (value && !queue.isFull()) {\r\n            queue.enqueue(value)\r\n            arrCurrent = queue.getQueue()\r\n            inputArea.value = ''\r\n        }\r\n    },\r\n    'leftOut': function () {\r\n        if (!queue.isEmpty()) {\r\n            alert(queue.dequeue())\r\n            arrCurrent = queue.getQueue()\r\n        } else {\r\n            alert('the queue is empty')\r\n        }\r\n    },\r\n    'sort': function (type) {\r\n        if (!queue.isEmpty()) {\r\n            // 排序\r\n            const sort = new Sort(queue.getQueue(), arrAnimations)\r\n            sort[type]()\r\n            queue.setQueue(sort.getElements())\r\n\r\n            // 根据排序结果渲染视图\r\n            const options = {\r\n                queue,\r\n                columnsArea,\r\n                renderSwap,\r\n                setArrCurrent,\r\n                arrElements: arrCurrent,\r\n                arrAnimation: sort.getAnimations(),\r\n                disableBtns: () => { return disableAllBtn(arrBtns) },\r\n                resetColor: () => { resetAllColor(columns) }\r\n            }\r\n            renderAnimation(options)\r\n        } else {\r\n            alert('the queue is empty')\r\n        }\r\n    }\r\n}\r\n\r\n// disableAllBtn(arrBtns)(true)\r\n\r\nfunction init() {\r\n    addEvent(btnsArea, 'click', function (event) {\r\n        if (event.target.className === 'sort') {\r\n            strategy[event.target.className](event.target.id)\r\n            refresh()\r\n        } else if (event.target.className && strategy[event.target.className]) {\r\n            strategy[event.target.className]()\r\n            refresh()\r\n        }\r\n    })\r\n}\r\n\r\nfunction refresh() {\r\n    renderColumns(columnsArea, arrCurrent)\r\n}\r\n\r\nfunction setArrCurrent(arr) {\r\n    arrCurrent = arr\r\n}\r\n\r\nlet queue = new Queue()\r\nstrategy['random']()\r\nrefresh()\r\ninit()\r\n\r\n"]}